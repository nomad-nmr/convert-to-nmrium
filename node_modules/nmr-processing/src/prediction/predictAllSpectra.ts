import type { Molecule } from 'openchemlib';

import { OptionsSignalsToXY, signalsToXY } from '../signals/signalsToXY';

import { PredictAllOptions, predictAll } from './predictAll';
/**
 * This function will generate an object compatible with NMR-ium
 *
 * @param molecule
 * @param options
 */

export async function predictAllSpectra(
  molecule: Molecule,
  options: {
    prediction?: PredictAllOptions;
    simulation?: OptionsSignalsToXY;
  } = {},
) {
  const predictions = await predictAll(molecule, options.prediction);
  const spectra: any[] = [];
  const result = { spectra, molecules: [{ molfile: predictions.molfile }] };
  spectra.push(getProton(predictions.proton, options.simulation));

  return result;
}

function getProton(prediction: any, options?: OptionsSignalsToXY) {
  const { x, y } = signalsToXY(prediction.signals, options);
  const spectrum = {
    id: '',
    // todo Array.from is temporary for the developement
    data: { x: Array.from(x), re: Array.from(y), im: null },
    info: {
      nucleus: prediction.nucleus,
      dimension: 1,
      originFrequency: 400,
      baseFrequency: 400,
      pulseSequence: 'prediction',
      experiment: 'proton',
      isFt: true,
    },
    // todo: currently we disable the ranges because there is no ID
    //ranges: { values: prediction.ranges },
  };

  return spectrum;
}
