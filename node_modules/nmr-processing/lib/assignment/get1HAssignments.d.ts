import { Molecule } from 'openchemlib';
import { NMRRange } from '..';
import { PredictProtonOptions } from '../prediction/predictProton';
import type { NMRSignal1D } from '../signals/NMRSignal1D';
import { MakeMandatory } from '../utilities/MakeMandatory';
import { RestrictionByCS } from './utils/buildAssignments';
export declare type NMRSignal1DWithAtomsAndDiaIDs = MakeMandatory<NMRSignal1D, 'atoms' | 'diaIDs' | 'nbAtoms'>;
export declare type NMRRangeWithIntegration = MakeMandatory<NMRRange, 'integration'>;
export interface Get1HAssignmentsOptions {
    restrictionByCS?: Partial<RestrictionByCS>;
    /**
     * min score to accept an assignment
     * @default 1
     */
    minScore?: number;
    /**
     * maximal number of assignments to return
     * @default 10
     */
    maxSolutions?: number;
    /**
     * number of allowed unassignment signals
     * @default 0
     */
    nbAllowedUnAssigned?: number;
    /**
     * time limit in miliseconds to finish the assignment procedure.
     * @default 6000
     */
    timeout?: number;
    /**
     * prediction options
     */
    predictionOptions?: PredictProtonOptions;
}
export interface Targets {
    [key: string]: NMRRangeWithIntegration;
}
export declare function get1HAssignments(ranges: NMRRange[], molecule: Molecule, options?: Get1HAssignmentsOptions): Promise<{
    score: any;
    assignment: unknown[];
}[]>;
