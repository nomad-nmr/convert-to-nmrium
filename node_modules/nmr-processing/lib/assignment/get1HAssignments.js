"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.get1HAssignments = void 0;
const openchemlib_utils_1 = require("openchemlib-utils");
const predictProton_1 = require("../prediction/predictProton");
const buildAssignments_1 = require("./utils/buildAssignments");
const generateID_1 = __importDefault(require("./utils/generateID"));
function checkAtomsAndDiaIDs(signals) {
    for (const signal of signals) {
        if (!signal.atoms)
            throw new Error('signal has not atoms property');
        if (!signal.diaIDs)
            throw new Error('signal has not diaIDs property');
        if (!signal.nbAtoms)
            throw new Error('signal has not nbAtoms property');
    }
}
function checkForIntegration(ranges) {
    for (let range of ranges) {
        if (range.integration === undefined) {
            throw new Error('ranges has not integration property');
        }
    }
}
async function get1HAssignments(ranges, molecule, options = {}) {
    let { restrictionByCS, minScore = 1, maxSolutions = 10, nbAllowedUnAssigned = 0, timeout = 6000, predictionOptions = {}, } = options;
    if (!molecule) {
        throw new Error('It is needed a OCL molecule instance to assign');
    }
    molecule.addImplicitHydrogens();
    (0, openchemlib_utils_1.addDiastereotopicMissingChirality)(molecule);
    const { joinedSignals } = await (0, predictProton_1.predictProton)(molecule, predictionOptions);
    checkForIntegration(ranges);
    checkAtomsAndDiaIDs(joinedSignals);
    const targets = {};
    for (const range of ranges) {
        const { id = (0, generateID_1.default)() } = range;
        targets[id] = JSON.parse(JSON.stringify(range));
    }
    return (0, buildAssignments_1.buildAssignments)({
        restrictionByCS,
        timeout,
        minScore,
        nbAllowedUnAssigned,
        maxSolutions,
        targets,
        joinedSignals,
        useIntegrationRestriction: true,
    });
}
exports.get1HAssignments = get1HAssignments;
//# sourceMappingURL=get1HAssignments.js.map