import { NMRZone } from '..';
import type { GetKernelOptions } from '../peaks/util/getKernel';
export interface Data2D {
    z: number[][] | Float64Array[];
    minX: number;
    maxX: number;
    minY: number;
    maxY: number;
}
export interface XYZAutoZonesPickingOptions {
    /**
     * max number of points in any dimension to pad the input data, this is needed to avoid lost peaks when the input matrix is too small.
     * @default 14
     */
    sizeToPad?: number;
    /**
     * If it's true, try to find the real maximum for each bidimensional peak.
     * @default true
     */
    realTopDetection?: boolean;
    /**
     * positive value filter small peaks by intensity
     * @default 0.5
     */
    thresholdFactor?: number;
    /**
     * specify the nuclei of each dimension
     * @default ['1H','1H']
     */
    nuclei?: string[];
    /**
     * specify the frequency for each dimension.
     */
    observedFrequencies: number[] | Float64Array;
    /**
     * If it's true, it try to ajust the shift and add missing cross peaks, useful only for homonuclear data.
     * @default false
     */
    enhanceSymmetry?: boolean;
    /**
     * If it's true, peaks with less than a specific percentage (maxPercentCutOff) of the maximum intensity will be removed.
     * @default true;
     */
    clean?: boolean;
    /**
     * percentage of maximum intensity as cutoff for small peaks.
     * @default 0.03
     */
    maxPercentCutOff?: number;
    /**
     * Specify the minimum distance in Hz for each dimension to join peaks in a signal.
     * @default [24,24]
     */
    tolerances?: number[];
    /**
     * If it is true, the convolution will be forced by FFT
     * @default true
     */
    convolutionByFFT?: boolean;
    /**
     * kernel options to calculate a laplacianOfGaussian kernel with a specify size.
     */
    kernel?: GetKernelOptions;
}
export declare function xyzAutoZonesPicking(spectraData: Data2D, options: XYZAutoZonesPickingOptions): NMRZone[];
/**
 * This function converts a set of 2D-peaks in 2D-signals. Each signal could be composed
 * of many 2D-peaks, and it has some additional information related to the NMR spectrum.
 * @private
 */
export interface CreateSignals2DOptions {
    nCols: number;
    nRows: number;
    absoluteData: number[] | Float64Array;
    originalData: number[] | Float64Array;
    observedFrequencies: number[] | Float64Array;
    tolerances: number[];
    nuclei: string[];
    realTopDetection: boolean;
    minY: number;
    maxY: number;
    minX: number;
    maxX: number;
}
