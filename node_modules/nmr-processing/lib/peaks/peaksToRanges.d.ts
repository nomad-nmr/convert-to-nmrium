import type { DataXY } from 'cheminfo-types';
import type { NMRRange } from '../xy/NMRRange';
import type { NMRPeak1D } from './NMRPeak1D';
export interface OptionsPeaksToRanges {
    /**
     * Number of hydrogens or some number to normalize the integration data. If it's zero return the absolute integration value
     * @default 100
     */
    integrationSum?: number;
    /**
     * if it is true, it will join any overlaped ranges.
     * @default true
     */
    joinOverlapRanges?: boolean;
    /**
     * If exits it remove all the signals with integration < clean value
     * @default 0.4
     */
    clean?: number;
    /**
     * If true, the Janalyzer function is run over signals to compile the patterns.
     * @default true
     */
    compile?: boolean;
    /**
     * option to chose between approx area with peaks or the sum of the points of given range ('sum', 'peaks')
     * @default 'sum'
     */
    integralType?: string;
    /**
     * Observed frequency
     * @default 400
     */
    frequency?: number;
    /**
     * distance limit to clustering peaks.
     * @default 16
     */
    frequencyCluster?: number;
    /**
     * If true, it will keep the peaks for each signal
     */
    keepPeaks?: boolean;
    /**
     * Nucleus
     * @default '1H'
     */
    nucleus?: string;
}
export interface OptionsDetectSignals {
    integrationSum?: number;
    integralType?: string;
    frequencyCluster?: number;
    frequency?: number;
    nucleus?: string;
}
declare type NMRPeak1DIntern = Omit<NMRPeak1D, 'fwhm' | 'shape'>;
/**
 * This function clustering peaks and calculate the integration value for each range from the peak list returned from extractPeaks function.
 */
export declare function peaksToRanges(data: DataXY, peakList: NMRPeak1DIntern[], options?: OptionsPeaksToRanges): NMRRange[];
export {};
