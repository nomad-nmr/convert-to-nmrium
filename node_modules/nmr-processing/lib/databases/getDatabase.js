"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDatabase = void 0;
const cross_fetch_1 = require("cross-fetch");
const resurrectRange_1 = require("../utilities/resurrectRange");
async function getDatabase(url = 'https://docs.google.com/spreadsheets/d/1uwyq_L38PMRWCcT4If_EhPbHKyY3q_2tpjV8vr5_zh0/edit?usp=sharing') {
    if (url.includes('google.com')) {
        url = `https://googledocs.cheminfo.org/spreadsheets/d/${extractGoogleUUID(url)}/export?format=tsv`;
    }
    const response = await (0, cross_fetch_1.fetch)(url);
    const result = await response.text();
    const parsed = parseData(result);
    const results = [];
    for (let line of parsed.data) {
        const result = {
            smiles: '',
            solvent: '',
            nucleus: '',
            jcampURL: '',
            names: [],
            meta: {},
            ranges: [],
        };
        for (let i = 0; i < line.length; i++) {
            switch (parsed.kinds[i]) {
                case 'smiles':
                    result.smiles = line[i];
                    break;
                case 'solvent':
                    result.solvent = line[i];
                    break;
                case 'nucleus':
                    result.nucleus = line[i];
                    break;
                case 'jcampURL':
                    result.jcampURL = line[i];
                    break;
                case 'name':
                    if (result.names)
                        result.names.push(line[i]);
                    break;
                case 'meta':
                    if (result.meta)
                        result.meta[parsed.labels[i]] = line[i];
                    break;
                case 'signal': {
                    const range = (0, resurrectRange_1.resurrectRange)(line[i]);
                    if (range)
                        result.ranges.push(range);
                    break;
                }
                default:
                    throw new Error(`Unknown column kind: ${parsed.kinds[i]}`);
            }
        }
        results.push(result);
    }
    return results;
}
exports.getDatabase = getDatabase;
function extractGoogleUUID(url) {
    return url.replace(/.*\/(?<uuid>[^/]{20,50}).*/, '$<uuid>');
}
function parseData(text) {
    const matrix = text
        .split(/\r?\n/)
        .filter((line) => !/^\s*$/.exec(line))
        .map((line) => line.split('\t').map((cell) => cell.trim()));
    const labels = matrix[0];
    const kinds = matrix[1];
    const data = matrix.slice(2);
    return {
        labels,
        kinds,
        data,
    };
}
//# sourceMappingURL=getDatabase.js.map