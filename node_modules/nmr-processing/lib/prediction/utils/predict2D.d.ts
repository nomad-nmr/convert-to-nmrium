import { Molecule } from 'openchemlib';
import type { NMRSignal2D } from '../../xyz/NMRSignal2D';
import type { PredictCarbon, PredictCarbonOptions } from '../predictCarbon';
import type { PredictProton, PredictProtonOptions } from '../predictProton';
import type { Prediction1D } from '../prediction1D';
/**
 * Generate the correlation bidimensional nmr peaks based on the number of bonds between a pair of atoms
 * @returns {object} - object with molfile, diaIDs, 2D signals and zones.
 */
export declare type Predictor = PredictCarbon | PredictProton;
export interface Predictors {
    [key: string]: Predictor | undefined;
    H?: Predictor;
    C?: Predictor;
}
interface JoinDistanceOption {
    [key: string]: number;
    H: number;
    C: number;
}
export interface Predict2DOptions {
    /**
     * nucleus label to use in the X axis
     */
    from?: 'H' | 'C';
    /**
     * nucleus label to use in the Y axis
     */
    to?: 'H' | 'C';
    /**
     * maximum number of bonds to take into account.
     */
    maxLength?: number;
    /**
     * minimum number of bonds to take into account
     * @default 0
     */
    minLength?: number;
    /**
     * mono dimensional predictors.
     */
    predictor?: Predictors;
    /**
     *  mono dimensional signal to generate the bidimenionals cross peaks.
     * The object should has properties with name equal to "H" and "C".
     */
    predictOptions?: PredictOptions;
    /**
     * signals with euclidean distance in ppm less than this it will
     * joined into a zone.
     * @default {H:0.05,C:0.5}
     */
    joinDistance?: JoinDistanceOption;
    /**
     * mono dimensional signal to generate the bidimenionals cross peaks.
     * The object should has properties with name equal to "H" and "C".
     * the value of each prediction should be similar that predictProton and predictCarbon.
     */
    predictions?: Predictions;
    /**
     * if true, the self correlation signal will be add to the prediction.
     * @default false
     */
    includeDiagonal?: boolean;
}
export interface PredictOptions {
    [key: string]: PredictProtonOptions | PredictCarbonOptions | undefined;
    H?: PredictProtonOptions;
    C?: PredictCarbonOptions;
}
export interface Predictions {
    [key: string]: Prediction1D | undefined;
    H?: Prediction1D;
    C?: Prediction1D;
}
export declare function predict2D(molecule: Molecule, options?: Predict2DOptions): Promise<{
    molfile: string;
    diaIDs: string[];
    nuclei: string[];
    joinedSignals: NMRSignal2D[];
    signals: any[];
    zones: {
        signals: NMRSignal2D[];
        x: {
            from: number;
            to: number;
        };
        y: {
            from: number;
            to: number;
        };
    }[];
    molecule: Molecule;
}>;
export {};
