import type { SignalJoinCouplingsOptions } from '../signal/signalJoinCouplings';
import type { MakeMandatory } from '../utilities/MakeMandatory';
import type { NMRSignal1D } from './NMRSignal1D';
import type { Jcoupling } from './jcoupling';
export interface SignalsJoinOptions {
    /**
     * options for signalJoinCouplings
     * @default {}
     */
    joinCouplings?: SignalJoinCouplingsOptions;
}
declare type JcouplingFromPrediction = MakeMandatory<Jcoupling, 'multiplicity' | 'diaIDs' | 'pathLength'>;
declare type Signal1DWidthDiaID = MakeMandatory<NMRSignal1D, 'diaIDs'>;
declare type Signal1DWidthJsAndDiaID = Omit<Signal1DWidthDiaID, 'js'> & {
    js: JcouplingFromPrediction[];
};
/**
 * Join signals if all the same diaID
 */
export declare function signalsJoin(signals: NMRSignal1D[], options?: SignalsJoinOptions): Signal1DWidthJsAndDiaID[];
export {};
