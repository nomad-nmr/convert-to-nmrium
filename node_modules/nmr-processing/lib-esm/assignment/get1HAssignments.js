import { addDiastereotopicMissingChirality } from 'openchemlib-utils';
import { predictProton, } from '../prediction/predictProton';
import { buildAssignments } from './utils/buildAssignments';
import generateID from './utils/generateID';
function checkAtomsAndDiaIDs(signals) {
    for (const signal of signals) {
        if (!signal.atoms)
            throw new Error('signal has not atoms property');
        if (!signal.diaIDs)
            throw new Error('signal has not diaIDs property');
        if (!signal.nbAtoms)
            throw new Error('signal has not nbAtoms property');
    }
}
function checkForIntegration(ranges) {
    for (let range of ranges) {
        if (range.integration === undefined) {
            throw new Error('ranges has not integration property');
        }
    }
}
export async function get1HAssignments(ranges, molecule, options = {}) {
    let { restrictionByCS, minScore = 1, maxSolutions = 10, nbAllowedUnAssigned = 0, timeout = 6000, predictionOptions = {}, } = options;
    if (!molecule) {
        throw new Error('It is needed a OCL molecule instance to assign');
    }
    molecule.addImplicitHydrogens();
    addDiastereotopicMissingChirality(molecule);
    const { joinedSignals } = await predictProton(molecule, predictionOptions);
    checkForIntegration(ranges);
    checkAtomsAndDiaIDs(joinedSignals);
    const targets = {};
    for (const range of ranges) {
        const { id = generateID() } = range;
        targets[id] = JSON.parse(JSON.stringify(range));
    }
    return buildAssignments({
        restrictionByCS,
        timeout,
        minScore,
        nbAllowedUnAssigned,
        maxSolutions,
        targets,
        joinedSignals,
        useIntegrationRestriction: true,
    });
}
//# sourceMappingURL=get1HAssignments.js.map