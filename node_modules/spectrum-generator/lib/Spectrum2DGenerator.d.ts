import type { Shape2D, XYNumber } from 'ml-peak-shape-generator';
import type { Peak2D, Peak2DSeries } from './types/Peaks2D';
declare type NumToNumFn = (x: number, y?: number) => number | XYNumber;
interface OptionsSG2D {
    /**
     * First x value (inclusive).
     * @default `0`
     */
    from?: number | XYNumber;
    /**
     * Last x value (inclusive).
     * @default `100`
     */
    to?: number | XYNumber;
    /**
     * Number of points in the final spectrum.
     * @default `1001`
     */
    nbPoints?: number | XYNumber;
    /**
     * Function that returns the width of a peak depending the x value.
     * @default `() => 5`
     */
    peakWidthFct?: NumToNumFn;
    /**
     * Define the shape of the peak.
     * @default `shape: {
            kind: 'gaussian',
          },`
     */
    shape?: Shape2D;
}
interface AddPeak2DOptions {
    /**
     * Half-height width.
     * @default `peakWidthFct(value)`
     */
    width?: number | XYNumber;
    fwhm?: number | XYNumber;
    /**
     * Define the shape of the peak.
     */
    shape?: Shape2D;
    /**
     * Number of times of fwhm to calculate length..
     * @default 'covers 99.99 % of volume'
     */
    factor?: number | XYNumber;
}
interface GetSpectrum2DOptions {
    /**
     * generate a copy of the current data
     * @default true
     */
    copy?: boolean;
}
interface GenerateSpectrum2DOptions {
    /**
     * Options for spectrum generator
     */
    generator?: OptionsSG2D;
    /**
     * Options for addPeaks method
     */
    peaks?: AddPeak2DOptions;
}
export interface Spectrum2D {
    minX: number;
    maxX: number;
    minY: number;
    maxY: number;
    minZ: number;
    maxZ: number;
    z: Float64Array[] | number[][];
}
export interface Spectrum2DGenerator {
    addPeaks(peaks: Peak2D[] | Peak2DSeries, options?: AddPeak2DOptions): void;
    addPeak(peak: Peak2D, options?: AddPeak2DOptions): void;
    getSpectrum(options?: GetSpectrum2DOptions | boolean): void;
    reset(): void;
}
export declare class Spectrum2DGenerator implements Spectrum2DGenerator {
    private from;
    private to;
    private nbPoints;
    interval: XYNumber;
    private data;
    private maxPeakHeight;
    private shape;
    private peakWidthFct;
    constructor(options?: OptionsSG2D);
}
export declare function generateSpectrum2D(peaks: Peak2D[] | Peak2DSeries, options?: GenerateSpectrum2DOptions): Spectrum2D;
export {};
