"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.xyCumulativeDistributionStatistics = void 0;
const xCumulative_1 = require("../x/xCumulative");
const xMaxValue_1 = require("../x/xMaxValue");
const xyCheck_1 = require("./xyCheck");
const xyMaxYPoint_1 = require("./xyMaxYPoint");
const STEPS = [0.25, 0.5, 0.75];
/** Cumulative Distribution Statistics
 *
 * @param data - array of points {x,y}
 * @returns x0, x25, x50, x75, x100, mode (x for maxY)
 */
function xyCumulativeDistributionStatistics(data) {
    (0, xyCheck_1.xyCheck)(data);
    const { x, y } = data;
    if (x.length === 0) {
        throw new Error('xyCumulativeDistributionStatistics: Array length must be greater than 0');
    }
    const cumulativeSum = (0, xCumulative_1.xCumulative)(y);
    const maxY = (0, xMaxValue_1.xMaxValue)(cumulativeSum);
    for (let i = 0; i < cumulativeSum.length; i++) {
        cumulativeSum[i] /= maxY;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const result = {};
    // need to find the x values closest to STEPS/100
    result.x0 = x[0];
    result.x100 = x[x.length - 1];
    let currentStep = 0;
    breakPoint: for (let i = 1; i < cumulativeSum.length; i++) {
        while (STEPS[currentStep] < cumulativeSum[i]) {
            result[`x${STEPS[currentStep] * 100}`] =
                x[i - 1] +
                    (x[i] - x[i - 1]) *
                        ((STEPS[currentStep] - cumulativeSum[i - 1]) /
                            (cumulativeSum[i] - cumulativeSum[i - 1]));
            currentStep++;
            if (currentStep === STEPS.length)
                break breakPoint;
        }
    }
    result.xMode = (0, xyMaxYPoint_1.xyMaxYPoint)(data).x;
    let sumXY = 0;
    let sumY = 0;
    for (let i = 0; i < x.length; i++) {
        sumXY += x[i] * y[i];
        sumY += y[i];
    }
    result.xMean = sumXY / sumY;
    return result;
}
exports.xyCumulativeDistributionStatistics = xyCumulativeDistributionStatistics;
//# sourceMappingURL=xyCumulativeDistributionStatistics.js.map