"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.xyRealMaxYPoint = void 0;
const xGetTargetIndex_1 = require("../x/xGetTargetIndex");
const xyCheck_1 = require("./xyCheck");
/**
 * Find the closest minimum going down hill
 *
 * @param data - Object that contains property x (an ordered increasing array) and y (an array)
 * @param options - options
 * @returns - An object with the x/y value
 */
function xyRealMaxYPoint(data, options = {}) {
    (0, xyCheck_1.xyCheck)(data);
    const { x, y } = data;
    const targetIndex = (0, xGetTargetIndex_1.xGetTargetIndex)(x, options);
    // interpolation to a sin() function
    if (y[targetIndex - 1] > 0 &&
        y[targetIndex + 1] > 0 &&
        y[targetIndex] >= y[targetIndex - 1] &&
        y[targetIndex] >= y[targetIndex + 1]) {
        let alpha = 20 * Math.log10(y[targetIndex - 1]);
        let beta = 20 * Math.log10(y[targetIndex]);
        let gamma = 20 * Math.log10(y[targetIndex + 1]);
        let p = (0.5 * (alpha - gamma)) / (alpha - 2 * beta + gamma);
        return {
            x: x[targetIndex] + (x[targetIndex] - x[targetIndex - 1]) * p,
            y: y[targetIndex] - 0.25 * (y[targetIndex - 1] - y[targetIndex + 1]) * p,
            index: targetIndex,
        };
    }
    else {
        return {
            x: x[targetIndex],
            y: y[targetIndex],
            index: targetIndex,
        };
    }
}
exports.xyRealMaxYPoint = xyRealMaxYPoint;
//# sourceMappingURL=xyRealMaxYPoint.js.map