"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.xyUniqueX = void 0;
const xyCheck_1 = require("./xyCheck");
const xySortX_1 = require("./xySortX");
/**
 * Ensure x values are unique
 *
 * @param data - Object that contains property x (Array) and y (Array)
 * @param options - Object containing a property algorithm (can be 'sum' or 'average', the latter being the default value), and a property isSorted (boolean indicating if the x-array is sorted).
 */
function xyUniqueX(data, options = {}) {
    (0, xyCheck_1.xyCheck)(data);
    const { algorithm = 'average', isSorted = true } = options;
    if (!isSorted) {
        data = (0, xySortX_1.xySortX)(data);
    }
    switch (algorithm) {
        case 'average':
            return average(data);
        case 'sum':
            return sum(data);
        default:
            throw new Error(`xyUniqueX: unknown algorithm: ${algorithm}`);
    }
}
exports.xyUniqueX = xyUniqueX;
/**
 * Average.
 *
 * @param data - Input.
 * @returns Result.
 */
function average(data) {
    let x = [];
    let y = [];
    let cumulativeY = data.y[0];
    let divider = 1;
    for (let i = 1; i < data.x.length; i++) {
        if (!(data.x[i] === data.x[i - 1])) {
            x.push(data.x[i - 1]);
            y.push(cumulativeY / divider);
            cumulativeY = 0;
            divider = 0;
        }
        cumulativeY += data.y[i];
        divider++;
    }
    x.push(data.x[data.x.length - 1]);
    y.push(cumulativeY / divider);
    return { x, y };
}
/**
 * Sum.
 *
 * @param data - Input.
 * @returns Result.
 */
function sum(data) {
    let x = [];
    let y = [];
    let cumulativeY = data.y[0];
    for (let i = 1; i < data.x.length; i++) {
        if (!(data.x[i] === data.x[i - 1])) {
            x.push(data.x[i - 1]);
            y.push(cumulativeY);
            cumulativeY = 0;
        }
        cumulativeY += data.y[i];
    }
    x.push(data.x[data.x.length - 1]);
    y.push(cumulativeY);
    return { x, y };
}
//# sourceMappingURL=xyUniqueX.js.map