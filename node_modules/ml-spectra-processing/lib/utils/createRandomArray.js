"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomArray = void 0;
const ml_xsadd_1 = __importDefault(require("ml-xsadd"));
/**
 * Create a random array of numbers of a specific length
 *
 * @return - array of random floats normally distributed
 */
let spare;
let hasSpare = false;
function createRandomArray(options = {}) {
    let { mean = 0, standardDeviation = 1, length = 1000, range = 1, seed, distribution = 'normal', } = options;
    const generator = new ml_xsadd_1.default(seed);
    let returnArray = new Float64Array(length);
    switch (distribution) {
        case 'normal':
            for (let i = 0; i < length; i++) {
                returnArray[i] = generateGaussian(mean, standardDeviation, generator);
            }
            break;
        case 'uniform':
            for (let i = 0; i < length; i++) {
                returnArray[i] = (generator.random() - 0.5) * range + mean;
            }
            break;
        default:
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            throw new Error(`unknown distribution: ${distribution}`);
    }
    return returnArray;
}
exports.createRandomArray = createRandomArray;
function generateGaussian(mean, standardDeviation, generator) {
    let val, u, v, s;
    if (hasSpare) {
        hasSpare = false;
        val = spare * standardDeviation + mean;
    }
    else {
        do {
            u = generator.random() * 2 - 1;
            v = generator.random() * 2 - 1;
            s = u * u + v * v;
        } while (s >= 1 || s === 0);
        s = Math.sqrt((-2.0 * Math.log(s)) / s);
        spare = v * s;
        hasSpare = true;
        val = mean + standardDeviation * u * s;
    }
    return val;
}
//# sourceMappingURL=createRandomArray.js.map