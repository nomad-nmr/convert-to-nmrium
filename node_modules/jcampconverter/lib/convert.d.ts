/**
 *
 * @typedef {object} ConvertOptions
 * @property {RegExp} [options.keepRecordsRegExp=/^$/] - By default we don't keep meta information.
 * @property {boolean} [options.canonicDataLabels=true] - Canonize the Labels (uppercase without symbol).
 * @property {boolean} [options.canonicMetadataLabels=false] - Canonize the metadata Labels (uppercase without symbol).
 * @property {boolean} [options.dynamicTyping=false] - Convert numbers to Number.
 * @property {boolean} [options.withoutXY=false] - Remove the XY data.
 * @property {boolean} [options.chromatogram=false] - Special post-processing for GC / HPLC / MS.
 * @property {boolean} [options.keepSpectra=false] - Force to keep the spectra in case of 2D.
 * @property {boolean} [options.noContour=false] - Don't calculate countour in case of 2D.
 * @property {number} [options.nbContourLevels=7] - Number of positive / negative contour levels to calculate.
 * @property {number} [options.noiseMultiplier=5] - Define for 2D the level as 5 times the median as default.
 * @property {boolean} [options.profiling=false] - Add profiling information.
 */
/**
 *
 * @typedef {object} Ntuples
 * @property {string[]} [varname]
 * @property {string[]} [symbol]
 * @property {string[]} [vartype]
 * @property {string[]} [varform]
 * @property {number[]} [vardim]
 * @property {string[]} [units]
 * @property {number[]} [factor]
 * @property {number[]} [first]
 * @property {number[]} [last]
 * @property {number[]} [min]
 * @property {number[]} [max]
 * @property {string[]} [nucleus]
 */
/**
 * @typedef { Record<string, any> } Spectrum
 * @property {Record<string, number[]>} [data]
 * @property {number} [firstX]
 * @property {number} [lastX]
 * @property {number} [deltaX]
 * @property {number} [yFactor]
 * @property {number} [xFactor]
 * @property {number} [nbPoints]
 */
/**
 *
 * @typedef {object} Entry
 * @property {Spectrum[]} spectra
 * @property {Ntuples} ntuples
 * @property {object} meta
 * @property {object} tmp
 * @property {string} [title]
 * @property {string} [dataType]
 * @property {string} [dataClass]
 * @property {boolean} [twoD]
 */
/**
 *
 * @typedef { object } ConvertResult
 * @property { object[] | boolean } profiling
 * @property { string[] } logs
 * @property { object[] } entries
 * @property { Entry[] } flatten
 */
/**
 * Parse a jcamp.
 *
 * @param {string|ArrayBuffer|Uint8Array} jcamp
 * @param {ConvertOptions} [options]
 * @returns {ConvertResult}
 */
export function convert(jcamp: string | ArrayBuffer | Uint8Array, options?: ConvertOptions | undefined): ConvertResult;
export type ConvertOptions = {
    /**
     * - By default we don't keep meta information.
     */
    keepRecordsRegExp?: RegExp | undefined;
    /**
     * - Canonize the Labels (uppercase without symbol).
     */
    canonicDataLabels?: boolean | undefined;
    /**
     * - Canonize the metadata Labels (uppercase without symbol).
     */
    canonicMetadataLabels?: boolean | undefined;
    /**
     * - Convert numbers to Number.
     */
    dynamicTyping?: boolean | undefined;
    /**
     * - Remove the XY data.
     */
    withoutXY?: boolean | undefined;
    /**
     * - Special post-processing for GC / HPLC / MS.
     */
    chromatogram?: boolean | undefined;
    /**
     * - Force to keep the spectra in case of 2D.
     */
    keepSpectra?: boolean | undefined;
    /**
     * - Don't calculate countour in case of 2D.
     */
    noContour?: boolean | undefined;
    /**
     * - Number of positive / negative contour levels to calculate.
     */
    nbContourLevels?: number | undefined;
    /**
     * - Define for 2D the level as 5 times the median as default.
     */
    noiseMultiplier?: number | undefined;
    /**
     * - Add profiling information.
     */
    profiling?: boolean | undefined;
};
export type Ntuples = {
    varname?: string[] | undefined;
    symbol?: string[] | undefined;
    vartype?: string[] | undefined;
    varform?: string[] | undefined;
    vardim?: number[] | undefined;
    units?: string[] | undefined;
    factor?: number[] | undefined;
    first?: number[] | undefined;
    last?: number[] | undefined;
    min?: number[] | undefined;
    max?: number[] | undefined;
    nucleus?: string[] | undefined;
};
export type Spectrum = Record<string, any>;
export type Entry = {
    spectra: Spectrum[];
    ntuples: Ntuples;
    meta: object;
    tmp: object;
    title?: string | undefined;
    dataType?: string | undefined;
    dataClass?: string | undefined;
    twoD?: boolean | undefined;
};
export type ConvertResult = {
    profiling: object[] | boolean;
    logs: string[];
    entries: object[];
    flatten: Entry[];
};
//# sourceMappingURL=convert.d.ts.map